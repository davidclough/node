Inertnal links which are incorrect:

                                                                                                                e.g. via <script> tags or by including bundles
                                                                                                                The this Keyword section further up also 
                                                                                                                console.log(!!0);                                                                  NOT A LINK
                                                                                                                See Comparison Operators & Equality, further down, for more information on how values of different types are compared..

Node.js                 in 4th section menu



void Main()
{
	string text = "text";
	string url = "http://abc.com";
	var original = String.Format("[{0}]({1})", text, url);
	
	var match = Regex.Match(original, @"\[(?<text>.+)\]\((?<url>.+)\)");
	if (match.Success)
	{
		var newMarkup = String.Format("<a href=\"{0}\" target=\"_blank\">{1}</a>",
									  match.Groups["url"].Captures[0].Value,
									  match.Groups["text"].Captures[0].Value);
		
		original.Dump();
		newMarkup.Dump();
	}
}






-------------------------------------------------

### <a name="language-objects"></a>Objects

#### <a name="language-objects-what"></a>What is an object?
#### <a name="language-objects-properties"></a>Properties and Methods.
#### <a name="language-objects-ways-to-create"></a>Ways to Create an Object
#### <a name="language-objects-prototypes"></a>Object Prototypes
#### <a name="language-objects-constructors"></a>Defining an Object Template via a Constructor Function
#### <a name="language-objects-creating-via-constructors"></a>Creating Objects via Constructors
#### <a name="language-objects-defining-methods"></a>Defining Methods
#### <a name="language-objects-richer-properties"></a>Richer Properties
#### <a name="language-objects-richer-objects"></a>Richer Objects
#### <a name="language-objects-example-inheritance"></a>Example Inhertance Tree

[What is an object?](#language-objects-what)
[Properties and Methods](#language-objects-properties)
[Ways to Create an Object](#language-objects-ways-to-create)
[Object Prototypes](#language-objects-prototypes)
[Defining an Object Template via a Constructor Function](#language-objects-constructors)
[Creating Objects via Constructors](#language-objects-creating-via-constructors)
[Defining Methods](#language-objects-defining-methods)
[Richer Properties](#language-objects-richer-properties)
[Richer Objects](#language-objects-richer-objects)
[Example Inheritance Tree](#language-objects-example-inheritance)







SECTIONS TO FINISH OFF:

TODO        (4)

-------------------------------------------------
Can be done at a later date:

Read through for mistakes.
Check how looks on page.













PluralSight - Creating JavaScript Objects           Jim Cooper
------------------------------------------------

SUMMARIZE ALL THIS in language-objects           and introduce sub-headers along the way:

Creating JavaScript Objects
    Using Object Literals to Create JavaScript Objects                            DONE
    The Dynamic Nature of JavaScript
        Changing properties willy-nilly after creation                              THINK DONE
    Using Constructor Functions to Create JavaScript Objects
        new Animal()                                                                               THINK DONE
    Using Object.create() to Create JavaScript Objects
        ** Object.create()
            prototype + enumerable, writeable, configurable - not as nice to use but got more controls
    ** give a brief mantion of ES2015 classes
    
    
JavaScript Object Properties
    Using Bracket Notation to Access JavaScript Properties
        accessing property via square brackets notation
    Using JavaScript Property Descriptors
        Object.defineProperty()
        writeable            - can it be set from outside (only get an error if in strict mode (otherwise silently fails)
        2:14 - Object.freeze() - can no longer change any of its properties
    Using the Enumerable Attribute
        enumerable        - set whether or not it will occur as an iteration within
            for...each
            Object.keys()
            JSON.stringify()
        Can still access the property though
    Using the Configurable Attribute
        configurable   - whether or not can call Object.defineProperty() again to change
            enumerable
            configurable
            delete the property
            DOESN'T affect writable though
    Using Getters and Setters                                                               I have covered these in #style-getters-and-setters
    
    
JavaScript Prototypes and Inheritance
    Getting Started with JavaScript Prototypes
        He defineProperty a "last" property for an array
        Then he puts it on Array.prototype
        Array is actuall just a function
    What Is a Prototype?
        Shows that a function has a prototype of {}
        Shows that the prototype of an object literal in undefined
        Shows that the same object does have a __proto__ property of Object
        A function's prototype is the object INSTANCE that will become the prototype for all objects created using this function as a constructor
        An object's prototype is the object INSTANCE from which the object is inherited.
        He shows that a func's prototype and the __proto__ property of an object constructed using the function point to the SAME object
    Instance vs. Prototype Properties
        He demonstartes how properties are fetched by searching up the inheritance chain
        hasOwnProperty() -           fluffy.hasOwnProperty("age")
    A Graphical Overview of Prototypes
        when a function is declared, JS creates an empty object in memeory and func's prototype prop is pointed to it
        new KW creates the new object but also adds a __proto__ property
        if update prototype property, existing objects which don't define their own will see the new value
    Changing a Function's Prototype
        Changing a function's prototype to point to a different object - objects that have already been created will still have __proto__ pointing to the old prototype
    Multiple Levels of Inheritance
        When going up the prototype chain (he goes via __proto__) you will eventually reach a value of null.
        Usually you will encounter Object and its prototype is null.
    Creating Your Own Prototypal Inheritance Chains    (THREE essential components)             All 3 are exactly the same on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create
*        Cat.prototype = Object.create(Animal.prototype);
        He does above instead of using "new": O.c is NOT going to call the Animal function - we only really want to do that when we want to create Cats.
            Just sets up the function as the prototype and sets up the prototype chain
*        The Cat constructor starts with the line          Animal.call(this);
        instanceof -          "fluffy instanceof Cat" is true, "fluffy instanceof Animal" also true
*        Cat.prototype.constructor = Cat;          - Constructor was still Animal
        fluffy.__proto__   is a Cat
    Creating Prototypes with Classes
        Creating via "class" and "extends" and "super" produces much the same code as above
        Two minor differences:
            fluffy.constructor is now a class rather than a function
            Members of classes are not enumerable by default - for...each, Object.keys()      hasOwnProperty will still return true
            
    
    
    



MENTION this PluralSight course "JavaScript Objects and Prototypes".


 

THIS IS PROBABLY ENOUGH - not gaining anything more in terms of personal knowledege and success in people understanding if try to add more

this
    1: Not inside a function - global object
    2: As above but in strict mode - undefined
    3: Inside an ordinary function that is not a constructor or method definition - no new value is introduced - this is the same inside the function as it does immediately outside the function
    4: Constructor function - object being created
    5: Function attached to a prototype - the object through which the method is being accessed
    6: within literal? this within any method you define will refer to the object within the literal - so can access another property from within a method
        var cat = {
            noise: "Meeow",
            makeNoise: function () {
              console.log(this.noise);
            }
        };
        cat.makeNoise();
     7: call, apply or bind - the object this refers to has been manually set within one of the parameters to either of these 3 functions
     8: A function that is defined as a DOM event handler - the element the event was fired from
    
    
    within any old nested function? NO, there is no new scope - contradicts my previous understanding

    
    
    I have already explained that = this along with samples
    

https://plnkr.co/
-----------------------------------------------------------------------------

TO DO NEXT
----------------

OBJECTS: List all parts of the document that still need to modify in relation to objects.
            
            
            

-----------------------------------------------------------------------------
This may come in handy if want to explain promises and deferreds in jQuery.

        console.clear();

        var doSomethingLater = function (fn, time) {
          var dfd = $.Deferred();

          setTimeout(function () {
            dfd.resolve(fn());
          }, time || 0);

          return dfd.promise();
        }

        var makePromise = function (functionNumber) {
          return doSomethingLater(function() {
            console.log("Function " + functionNumber + " executed after " + functionNumber + " seconds");
          }, functionNumber * 1000);
        };

        var promises = [];
        for (var i = 1; i <= 7; i++) {
          promises[i] = makePromise(i);
        }

        $.when(promises[1], promises[3], promises[4], promises[5], promises[2], promises[6], promises[7]).done(function (promise1, promise2) {
          // Handle both XHR objects
          console.log("All functions completed");
        });


        // This one definitely triggers the done() after EITHER completes.
        /*
        promise1.then(promise2).done(function(promise1, promise2) {
          // Handle both XHR objects
          console.log("One function completed");
        });
        */

        //console.log(sum);


-----------------------------------------------------------------------------
Sections (1) Standards, (2) javascript info, (3) patterns, practices and tricks.
----------
                                                                                            https://github.com/airbnb/javascript
http://www.w3schools.com/js                 Avoid going into too much depth

JavaScript Language ECMAScript 5 (ES5)
    Emphasis on ES5 which works in IE8.
        Will leave out samples of most keywords as they behave in the same way as for other C-based language. Will include examples for ones that have some different behaviour
        Not about the use of the word PROPERTY
        Avoid trying to think in terms of C# and expecting things to behave the same and, if it doesn't it's rubbish. Good, bad, awful but if use the good stuff and structure well then it can be tamed to a large extent...
        Avoid belief that JS standards should be the same as C# standards
        In interests of this document not becoming bloated ... explanations may be quite short and will be intended to cover essentials, not every detail..., external links...
        JS offers a trade off - extra brittleness for lots of flexibility
        ??Many people: He expresses how he was once a complete advocate of "total strong typing" but has now been converted
        Cannot be complete reference - serves no purpose - if want to learn, need to read, watch videos and write test applications.
    sequential
        hoisting: all variable declarations are hoisted to top of scope. Same with functions, however, although function expressions are hoisted, the actual function assignment itself is not
        Bad to rely on hoisting though so using function 
    Types
        2: 5 types   as we all know by now JS uses dynamic typing so any type of value can be assign to any variable and type can be changed...
            Each of these are actually objects whose earliest ancestor in the prototype chain the the Object prototype
            String
            Number
                NaN     D7
                parseInt
            Boolean
            Array
            Object
                prototype
            null
            undefined
    Objects
        1: declaration
        myCar["make"]                   D16
        http://www.w3schools.com/js/js_properties.asp
        Prototype
        toString() and other members in the Object prototype
        Augmenting with additional methods
        Adjusting existing methods
    Arrays
        1: declaration
            adding properties after declaration
    Strings
    JS Keywords
    Functions
        Declarations and expressions (FtU D12) http://stackoverflow.com/questions/1013385/what-is-the-difference-between-a-function-expression-vs-declaration-in-javascrip
        Use declaration syntax if define inside a loop (http://helephant.com/2012/07/14/javascript-function-declaration-vs-expression/)
        Space to avoid it looking like you have declared a function called "function".
        "arguments" property (it's not a true array but there is a trick to convert it to one)
        Keep small and single resp, e.g. split longer ones into separate functions.
        Try to keep non-UI logic in separate funtions from ones that manipulate the UI.
    Calling functions
        D81 - D97
    Iterators and Generators
    Variables
    Hoisting
        See section in http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/
    Operators
    Boolean - Comparison Operators & Equality
        == coercive - will not take type into account               http://www.w3schools.com/js/js_comparisons.asp
        !
    this keyword
    Self executing funtions (Immediately-invoked function expressions (IIFE)).
        Golden parentheses
    Closures.
        http://javascript.crockford.com/private.html
    for...in
        D35
    throw
        Can throw ANY object
    try/catch, try/finally
    eval() - avoid. State the one case where have used.
    new keyword
    typeof
        returns a STRING
        if (typeof(Storage) !== "undefined") {                   http://www.w3schools.com/html/html5_webstorage.asp
    Truthy and Falsey
    Reserved Words
    Type Coercion - D21
    label statements
        https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/label             break continue
        Won't need these
    Block scope
        no such thing - hoisting
        Scope is per containing function or object
    Global Namespace

The DOM
    Point them towards jQuery for DOM manipulation
    Windows
    Cookies
    Local Storage
    
Coding Style            DO put recommendations in the LANGUAGE section, rather than adding, separately, half a mile below.
    Whitespace
        Do not add spaces inside parentheses.
        Do not add spaces inside brackets.
        Add spaces inside curly braces.
    Destructuring (airbnb)
    Functions
        Try to keep small with single reponsibility 
    Blocks
        braces in blocks
    Comments
        Reduce by good var and func naming...
    <script>
        DOM D6: Don't bother with type="text/javascript". It is the wrong MIME TYPE (application/...) so no browsers cater for it.
        Genrally should AVOID putting JS within a page (keep in separate JS file). Sometimes you may want to take advantage of certain ASP.NET feature,
            one ob being binding to some part of a model via razor tags or web forms data binding tags. In that case keep the code to a minimum, e.g. assign the values of the tags to javacript module properties. Code within JS files can then reference those properties from then on. 
            Obviously you will have to structure your code so that the JS file(s) containing those variables have been included BEFORE the <script> code initialises them and 
    Location of <script> tags.
        Low in body (unlike CSS which are high in head)           This won't necessary always remain the case... async
    semicolon insertion
    Avoid excessively long lines. When a statement will not fit nicely on a single line, it may be necessary to break it. It is best to break after a { left brace, [ left bracket, ( left paren, , comma, or before a . period, ? question mark, or : colon. If such a break is not feasible, then break after an operator and continue on the next line with 8 spaces added to the current indentation. Those 8 spaces do not change the current indentation.
    Inline assignments and ++
    IIFEs: Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this.
    Callback function parameters
    === and !==
        Either use if (a === null) or if (!a)
    Initialising Variable - Object Literals and Arrays, Bools
    Redefining and adding properties to standard types.
    Separation of business and UI
    Declarations
        Some say put all at top of container. Not really necessary as declaring just before use gives a better indication of intent. As long as people appreciate the concept of hoisting.
    Naming
        Descriptive but need to avoid clutter.
        Namespaces, e.g. PEP.         proactEnterprisePortal could seem to be a much more snsible choice to C# programmers but imagine the readability of code riddle with function calls like     proactEnterprisePortal.incidentManagementUtilities.createIncident()      PEP.incidents.create()
    Do not create functions within a loop (FtU D84)

Code Organisation
    File with the namespace object declaration which all modules and object constructors will be members of (it needs to be the FIRST out of the files with YOUR code)
        XXX You may find a requirement for some global variables may be need to work.  Put these within a module.
        Common functions that are used in all areas. Can define these within one or more modules.
        also module for vaues you may want to set via binding tags in web forms pages or razor views.
    Custom jQuery plugins - include after jQuery...
    File per module or object
    You may want some files KendoHelper... NO
    Bundling

Patterns, Tips and Tricks
    General modification of existing code
    !!
    "guard"          &&    D26
    "default"        ||        D29
    Convert to a Boolean        !!        D32
    that (or self) keyword
    Object.create()
    prototype
    Inheritance
        Just generally suggest ideas that COULD be implemented (different patterns, shared secrets, supermethods, keep hierarchies shallow) - patterns av in JS are diff from C#...
        Also indicate that these may be described in separate file.
        Also indicate that probably don't really need this for the size of our code bases and, if we ever do write larger code bases, consider using TypeScript.
        Prototypical inheritance
    console.log();
    debugger;
    console.trace();
    eval() - avoid. State the one case where have used.
    Samples equality comparisons
    IIFEs for modules and classes
    Efficient classes if will create multiple instances
    Supplant/function example
    Deferred object (see worksheet)
    
jQuery
    Attaching event handlers
    Creating Plugins
    Overriding Existing Plugins
    Tips and Tricks

ECMAScript 6 and Beyond    ES6 ES2016
    const, let, properties...
    
Development Tools
    F12 tools
    JSFiddle - https://jsfiddle.net/
    Simple testbed project
    linting and hinting
    Testing (Simon wrote a wiki article)
    Typescript (coffeescript traceUR)
    
Documentation Tools

Additional Libraries
    Lodash (Underscore), Lazy
        http://adamnengland.com/2013/10/10/benchmarks-underscore-js-vs-lodash-js-vs-lazy-js/
    jQuery UI
    ADD SOME MORE MENTIONS LATER
        Google it - https://en.wikipedia.org/wiki/List_of_JavaScript_libraries

Gotchas (if can think of enough)
                                                                http://www.w3schools.com/js/js_mistakes.asp
    http://www.standardista.com/javascript/15-common-javascript-gotchas/
    
Illness
    Strong risk that may get to like. If... contact Dr... for therapy.
    
-----------------------------------------------------------------------------






Leave more complicated and less-used stuff, e.g. inheritance, to separate documents.






http://hsablonniere.github.io/markleft/prezas/javascript-101.html#1.0
http://javascript.crockford.com/code.html
http://hsablonniere.github.io/markleft/prezas/javascript-101.html#1.0               Especially RED NOTES

                                                                https://google.github.io/styleguide/javascriptguide.xml#Modifying_prototypes_of_builtin_objects

```
CODE SAMPLE: 
```

	CODE SAMPLE: 
	TO MENTION: 
>	NEW SECTION REQUIRED: 
	TO MOVE: 
    SECTION COMPLETE BUT REARRANGE
<br /><a href="" target="_blank"></a><br />
    
    
	IMAGE REQUIRED:                        This one will probably only apply to Development Tools (F12) section

    
    
    
    
    
    
    
    

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
pg 33:
// Add a method conditionally.
Function.prototype.method = function (name, func) {
    if (!this.prototype[name]) {
        this.prototype[name] = func;
    }
};

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Standards: Requirements + Recommendations


script type not necessary but no harm - NO POINT mentioning in standards
https://en.wikibooks.org/wiki/JavaScript/Placing_the_Code:
    While the text/javascript was formally obsoleted in April 2006 by RFC 4329

Location:
http://stackoverflow.com/questions/436411/where-is-the-best-place-to-put-script-tags-in-html-markup
    Mentions bottom as antiquated but ASYNC and DEFER are not reliable enough across all browsers
https://developer.yahoo.com/performance/rules.html#js_bottom=
    Would imagine this is up to date. NOT TOTALLY
    "If a script can be deferred, it can also be moved to the bottom of the page. That will make your web pages load faster."
Necessary stuff, e.g. maybe namespace, can be put in a small bundle and included at the top.
NOT SURE if worth mentioning this.

Namespaces - always have one. Caps and small recommended as will avoid clutter and immediately know it is a namespace.
    A long descriptive namespace will quickly become annoying and use of camel case leaves people guessing if it the namespace object or a normal object.
    There is no acknowledged standard but I like.

// Comments - be generous - if code inside a method is greater than handful of lines there is a good chance that code is NOT self documenting, even if person writing at the time thinks it is.

http://javascript.crockford.com/code.html



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Some Resources forStandards on Web
-----------------------------------------------

Google:         https://google.github.io/styleguide/javascriptguide.xml
Quite concise, mostly in agreement, no mention of ===
Does is recommend too many other things, e.g. "the Closure library", and is that bad?





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------

General sections:








Closure
Debugging
Extra libraries that may be of use
Linting/Hinting
jQuery

Gotchas
    Warning about LINTing


    
    
    
    
* Namespaces
* Private/Public
* Functions
* Constants
* Objects
* Inheritance
* Be careful with Context - self/this which to use and when
* Documentation and how to use JSdocs - setup etc, commenting of code
* Using strings populated from resource
*  Operators e.g. == === etc... look at truthy falsey
* loops https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration 
* Jquery e.g. selectors
* Regex - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions 
* Unit Testing: QUnit or Jasmine    
    
    
    
    
    

Can't rec what not used much or stuff which is more specialist, like LoDash, Lazy.js  - could be mentioned as extra tools/libraries.
Chimp, jasmine, 


-------------------------------------------------------------------------------------------------------------









	var myJsonObject = `{
		"prop1": 5,
		"prop2": [ "JavaScript", 12, true, { "val1": 2, "val2": 5 } ],
		"prop3": {
			"firstName": "John",
			"surname": "Smith",
			"age": 28
		}
	}`;


[JSON](#language-built-in-objects-json)

















